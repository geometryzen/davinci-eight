"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.vertexShaderSrc = void 0;
var config_1 = require("../config");
var getAttribVarName_1 = require("../core/getAttribVarName");
var getUniformVarName_1 = require("../core/getUniformVarName");
var mustBeBoolean_1 = require("../checks/mustBeBoolean");
var mustBeDefined_1 = require("../checks/mustBeDefined");
var GraphicsProgramSymbols_1 = require("../core/GraphicsProgramSymbols");
function getUniformCodeName(uniforms, name) {
    return getUniformVarName_1.getUniformVarName(uniforms[name], name);
}
var SPACE = ' ';
var ATTRIBUTE = 'attribute' + SPACE;
var UNIFORM = 'uniform' + SPACE;
var COMMA = ',' + SPACE;
var SEMICOLON = ';';
var LPAREN = '(';
var RPAREN = ')';
var TIMES = SPACE + '*' + SPACE;
var ASSIGN = SPACE + '=' + SPACE;
var DIRECTIONAL_LIGHT_COSINE_FACTOR_VARNAME = "directionalLightCosineFactor";
/**
 * Generates a vertex shader.
 */
function vertexShaderSrc(attributes, uniforms, vColor, vCoords, vLight) {
    mustBeDefined_1.mustBeDefined('attributes', attributes);
    mustBeDefined_1.mustBeDefined('uniforms', uniforms);
    mustBeBoolean_1.mustBeBoolean(GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_COLOR, vColor);
    mustBeBoolean_1.mustBeBoolean(GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_COORDS, vCoords);
    mustBeBoolean_1.mustBeBoolean(GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_LIGHT, vLight);
    var lines = [];
    lines.push("// vertex shader generated by " + config_1.config.NAMESPACE + " " + config_1.config.VERSION);
    // The precision is implicitly highp for vertex shaders.
    // So there is no need to add preamble for changing the precision unless
    // we want to lower the precision.
    for (var aName in attributes) {
        if (attributes.hasOwnProperty(aName)) {
            lines.push(ATTRIBUTE + attributes[aName].glslType + SPACE + getAttribVarName_1.getAttribVarName(attributes[aName], aName) + SEMICOLON);
        }
    }
    for (var uName in uniforms) {
        if (uniforms.hasOwnProperty(uName)) {
            switch (uniforms[uName].glslType) {
                case 'sampler2D': {
                    break;
                }
                default: {
                    lines.push(UNIFORM + uniforms[uName].glslType + SPACE + getUniformCodeName(uniforms, uName) + SEMICOLON);
                }
            }
        }
    }
    if (vColor) {
        lines.push("varying highp vec4 " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_COLOR + ";");
    }
    if (vCoords) {
        lines.push("varying highp vec2 " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_COORDS + ";");
    }
    if (vLight) {
        lines.push("varying highp vec3 " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_LIGHT + ";");
    }
    lines.push("void main(void) {");
    var glPosition = [];
    glPosition.unshift(SEMICOLON);
    if (attributes[GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_POSITION]) {
        switch (attributes[GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_POSITION].glslType) {
            case 'float': {
                // This case would be unusual; just providing an x-coordinate.
                // We must provide defaults for the y-, z-, and w-coordinates.
                glPosition.unshift(RPAREN);
                glPosition.unshift('1.0');
                glPosition.unshift(COMMA);
                glPosition.unshift('0.0');
                glPosition.unshift(COMMA);
                glPosition.unshift('0.0');
                glPosition.unshift(COMMA);
                glPosition.unshift(getAttribVarName_1.getAttribVarName(attributes[GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_POSITION], GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_POSITION));
                glPosition.unshift(LPAREN);
                glPosition.unshift('vec4');
                break;
            }
            case 'vec2': {
                // This case happens when the user wants to work in 2D.
                // We must provide a value for the homogeneous w-coordinate,
                // as well as the z-coordinate.
                glPosition.unshift(RPAREN);
                glPosition.unshift('1.0');
                glPosition.unshift(COMMA);
                glPosition.unshift('0.0');
                glPosition.unshift(COMMA);
                glPosition.unshift(getAttribVarName_1.getAttribVarName(attributes[GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_POSITION], GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_POSITION));
                glPosition.unshift(LPAREN);
                glPosition.unshift('vec4');
                break;
            }
            case 'vec3': {
                // This is probably the most common case, 3D but only x-, y-, z-coordinates.
                // We must provide a value for the homogeneous w-coordinate.
                glPosition.unshift(RPAREN);
                glPosition.unshift('1.0');
                glPosition.unshift(COMMA);
                glPosition.unshift(getAttribVarName_1.getAttribVarName(attributes[GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_POSITION], GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_POSITION));
                glPosition.unshift(LPAREN);
                glPosition.unshift('vec4');
                break;
            }
            case 'vec4': {
                // This happens when the use is working in homodeneous coordinates.
                // We don't need to use the constructor function at all.
                glPosition.unshift(getAttribVarName_1.getAttribVarName(attributes[GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_POSITION], GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_POSITION));
                break;
            }
        }
    }
    else {
        glPosition.unshift("vec4(0.0, 0.0, 0.0, 1.0)");
    }
    // Reflections are applied first.
    if (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_REFLECTION_ONE_MATRIX]) {
        glPosition.unshift(TIMES);
        glPosition.unshift(getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_REFLECTION_ONE_MATRIX));
    }
    if (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_REFLECTION_TWO_MATRIX]) {
        glPosition.unshift(TIMES);
        glPosition.unshift(getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_REFLECTION_TWO_MATRIX));
    }
    if (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_MODEL_MATRIX]) {
        glPosition.unshift(TIMES);
        glPosition.unshift(getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_MODEL_MATRIX));
    }
    if (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_VIEW_MATRIX]) {
        glPosition.unshift(TIMES);
        glPosition.unshift(getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_VIEW_MATRIX));
    }
    if (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_PROJECTION_MATRIX]) {
        glPosition.unshift(TIMES);
        glPosition.unshift(getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_PROJECTION_MATRIX));
    }
    glPosition.unshift(ASSIGN);
    glPosition.unshift("gl_Position");
    glPosition.unshift('  ');
    lines.push(glPosition.join(''));
    if (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_POINT_SIZE]) {
        lines.push("  gl_PointSize = " + getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_POINT_SIZE) + ";");
    }
    if (vColor) {
        if (attributes[GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_COLOR]) {
            var colorAttribVarName = getAttribVarName_1.getAttribVarName(attributes[GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_COLOR], GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_COLOR);
            switch (attributes[GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_COLOR].glslType) {
                case 'vec4': {
                    lines.push("  " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_COLOR + " = " + colorAttribVarName + SEMICOLON);
                    break;
                }
                case 'vec3': {
                    if (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_OPACITY]) {
                        lines.push("  " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_COLOR + " = vec4(" + colorAttribVarName + ", " + getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_OPACITY) + ");");
                    }
                    else {
                        lines.push("  " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_COLOR + " = vec4(" + colorAttribVarName + ", 1.0);");
                    }
                    break;
                }
                default: {
                    throw new Error("Unexpected type for color attribute: " + attributes[GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_COLOR].glslType);
                }
            }
        }
        else if (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_COLOR]) {
            var colorUniformVarName = getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_COLOR);
            switch (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_COLOR].glslType) {
                case 'vec4': {
                    lines.push("  vColor = " + colorUniformVarName + SEMICOLON);
                    break;
                }
                case 'vec3': {
                    if (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_OPACITY]) {
                        lines.push("  " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_COLOR + " = vec4(" + colorUniformVarName + ", " + getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_OPACITY) + ");");
                    }
                    else {
                        lines.push("  " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_COLOR + " = vec4(" + colorUniformVarName + ", 1.0);");
                    }
                    break;
                }
                default: {
                    throw new Error("Unexpected type for color uniform: " + uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_COLOR].glslType);
                }
            }
        }
        else {
            lines.push("  " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_COLOR + " = vec4(1.0, 1.0, 1.0, 1.0);");
        }
    }
    if (vCoords) {
        lines.push("  " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_COORDS + " = " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_COORDS + ";");
    }
    if (vLight) {
        if (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_DIRECTIONAL_LIGHT_COLOR] && uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_DIRECTIONAL_LIGHT_DIRECTION] && uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_NORMAL_MATRIX] && attributes[GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_NORMAL]) {
            lines.push("  vec3 L = normalize(" + getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_DIRECTIONAL_LIGHT_DIRECTION) + ");");
            lines.push("  vec3 N = normalize(" + getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_NORMAL_MATRIX) + " * " + getAttribVarName_1.getAttribVarName(attributes[GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_NORMAL], GraphicsProgramSymbols_1.GraphicsProgramSymbols.ATTRIBUTE_NORMAL) + ");");
            lines.push("  // The minus sign arises because L is the light direction, so we need dot(N, -L) = -dot(N, L)");
            lines.push("  float " + DIRECTIONAL_LIGHT_COSINE_FACTOR_VARNAME + " = max(-dot(N, L), 0.0);");
            if (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_AMBIENT_LIGHT]) {
                lines.push("  " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_LIGHT + " = " + getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_AMBIENT_LIGHT) + " + " + DIRECTIONAL_LIGHT_COSINE_FACTOR_VARNAME + " * " + getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_DIRECTIONAL_LIGHT_COLOR) + ";");
            }
            else {
                lines.push("  " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_LIGHT + " = " + DIRECTIONAL_LIGHT_COSINE_FACTOR_VARNAME + " * " + getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_DIRECTIONAL_LIGHT_COLOR) + ";");
            }
        }
        else {
            if (uniforms[GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_AMBIENT_LIGHT]) {
                lines.push("  " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_LIGHT + " = " + getUniformCodeName(uniforms, GraphicsProgramSymbols_1.GraphicsProgramSymbols.UNIFORM_AMBIENT_LIGHT) + ";");
            }
            else {
                lines.push("  " + GraphicsProgramSymbols_1.GraphicsProgramSymbols.VARYING_LIGHT + " = vec3(1.0, 1.0, 1.0);");
            }
        }
    }
    lines.push("}");
    lines.push("");
    var code = lines.join("\n");
    return code;
}
exports.vertexShaderSrc = vertexShaderSrc;
